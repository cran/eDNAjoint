// Generated by rstantools.  Do not edit by hand.

/*
    eDNAjoint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    eDNAjoint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with eDNAjoint.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_joint_binary_cov_gamma_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 101> locations_array__ =
  {" (found before start of program)",
  " (in 'joint_binary_cov_gamma', line 22, column 4 to column 47)",
  " (in 'joint_binary_cov_gamma', line 23, column 4 to column 50)",
  " (in 'joint_binary_cov_gamma', line 24, column 4 to column 26)",
  " (in 'joint_binary_cov_gamma', line 25, column 4 to column 27)",
  " (in 'joint_binary_cov_gamma', line 26, column 4 to column 51)",
  " (in 'joint_binary_cov_gamma', line 29, column 2 to column 53)",
  " (in 'joint_binary_cov_gamma', line 30, column 2 to column 51)",
  " (in 'joint_binary_cov_gamma', line 31, column 2 to column 41)",
  " (in 'joint_binary_cov_gamma', line 32, column 2 to column 33)",
  " (in 'joint_binary_cov_gamma', line 60, column 2 to column 28)",
  " (in 'joint_binary_cov_gamma', line 61, column 2 to column 11)",
  " (in 'joint_binary_cov_gamma', line 62, column 2 to column 25)",
  " (in 'joint_binary_cov_gamma', line 63, column 2 to column 45)",
  " (in 'joint_binary_cov_gamma', line 64, column 2 to column 51)",
  " (in 'joint_binary_cov_gamma', line 34, column 4 to column 46)",
  " (in 'joint_binary_cov_gamma', line 35, column 4 to column 92)",
  " (in 'joint_binary_cov_gamma', line 36, column 4 to column 43)",
  " (in 'joint_binary_cov_gamma', line 33, column 24 to line 37, column 3)",
  " (in 'joint_binary_cov_gamma', line 33, column 2 to line 37, column 3)",
  " (in 'joint_binary_cov_gamma', line 39, column 6 to column 42)",
  " (in 'joint_binary_cov_gamma', line 38, column 15 to line 40, column 5)",
  " (in 'joint_binary_cov_gamma', line 38, column 2 to line 40, column 5)",
  " (in 'joint_binary_cov_gamma', line 65, column 2 to column 21)",
  " (in 'joint_binary_cov_gamma', line 67, column 4 to column 33)",
  " (in 'joint_binary_cov_gamma', line 66, column 23 to line 68, column 3)",
  " (in 'joint_binary_cov_gamma', line 66, column 2 to line 68, column 3)",
  " (in 'joint_binary_cov_gamma', line 70, column 4 to column 55)",
  " (in 'joint_binary_cov_gamma', line 69, column 24 to line 71, column 3)",
  " (in 'joint_binary_cov_gamma', line 69, column 2 to line 71, column 3)",
  " (in 'joint_binary_cov_gamma', line 74, column 7 to column 35)",
  " (in 'joint_binary_cov_gamma', line 75, column 7 to column 95)",
  " (in 'joint_binary_cov_gamma', line 73, column 26 to line 76, column 6)",
  " (in 'joint_binary_cov_gamma', line 73, column 5 to line 76, column 6)",
  " (in 'joint_binary_cov_gamma', line 72, column 2 to line 76, column 6)",
  " (in 'joint_binary_cov_gamma', line 78, column 4 to column 78)",
  " (in 'joint_binary_cov_gamma', line 77, column 15 to line 79, column 3)",
  " (in 'joint_binary_cov_gamma', line 77, column 2 to line 79, column 3)",
  " (in 'joint_binary_cov_gamma', line 81, column 4 to column 60)",
  " (in 'joint_binary_cov_gamma', line 80, column 15 to line 82, column 3)",
  " (in 'joint_binary_cov_gamma', line 80, column 2 to line 82, column 3)",
  " (in 'joint_binary_cov_gamma', line 85, column 7 to column 76)",
  " (in 'joint_binary_cov_gamma', line 84, column 22 to line 86, column 6)",
  " (in 'joint_binary_cov_gamma', line 84, column 5 to line 86, column 6)",
  " (in 'joint_binary_cov_gamma', line 83, column 2 to line 86, column 6)",
  " (in 'joint_binary_cov_gamma', line 44, column 8 to column 63)",
  " (in 'joint_binary_cov_gamma', line 43, column 17 to line 45, column 5)",
  " (in 'joint_binary_cov_gamma', line 43, column 4 to line 45, column 5)",
  " (in 'joint_binary_cov_gamma', line 47, column 8 to column 44)",
  " (in 'joint_binary_cov_gamma', line 46, column 18 to line 48, column 5)",
  " (in 'joint_binary_cov_gamma', line 46, column 4 to line 48, column 5)",
  " (in 'joint_binary_cov_gamma', line 51, column 11 to column 58)",
  " (in 'joint_binary_cov_gamma', line 50, column 25 to line 52, column 8)",
  " (in 'joint_binary_cov_gamma', line 50, column 7 to line 52, column 8)",
  " (in 'joint_binary_cov_gamma', line 49, column 4 to line 52, column 8)",
  " (in 'joint_binary_cov_gamma', line 54, column 2 to column 47)",
  " (in 'joint_binary_cov_gamma', line 55, column 2 to column 23)",
  " (in 'joint_binary_cov_gamma', line 56, column 2 to column 32)",
  " (in 'joint_binary_cov_gamma', line 57, column 2 to column 33)",
  " (in 'joint_binary_cov_gamma', line 2, column 4 to column 19)",
  " (in 'joint_binary_cov_gamma', line 3, column 4 to column 23)",
  " (in 'joint_binary_cov_gamma', line 4, column 4 to column 19)",
  " (in 'joint_binary_cov_gamma', line 5, column 10 to column 11)",
  " (in 'joint_binary_cov_gamma', line 5, column 4 to column 28)",
  " (in 'joint_binary_cov_gamma', line 6, column 10 to column 15)",
  " (in 'joint_binary_cov_gamma', line 6, column 4 to column 36)",
  " (in 'joint_binary_cov_gamma', line 7, column 10 to column 11)",
  " (in 'joint_binary_cov_gamma', line 7, column 4 to column 28)",
  " (in 'joint_binary_cov_gamma', line 8, column 4 to column 26)",
  " (in 'joint_binary_cov_gamma', line 9, column 4 to column 27)",
  " (in 'joint_binary_cov_gamma', line 10, column 10 to column 19)",
  " (in 'joint_binary_cov_gamma', line 10, column 4 to column 43)",
  " (in 'joint_binary_cov_gamma', line 11, column 10 to column 18)",
  " (in 'joint_binary_cov_gamma', line 11, column 4 to column 41)",
  " (in 'joint_binary_cov_gamma', line 12, column 10 to column 11)",
  " (in 'joint_binary_cov_gamma', line 12, column 4 to column 29)",
  " (in 'joint_binary_cov_gamma', line 13, column 10 to column 11)",
  " (in 'joint_binary_cov_gamma', line 13, column 4 to column 28)",
  " (in 'joint_binary_cov_gamma', line 14, column 10 to column 11)",
  " (in 'joint_binary_cov_gamma', line 14, column 4 to column 28)",
  " (in 'joint_binary_cov_gamma', line 15, column 10 to column 15)",
  " (in 'joint_binary_cov_gamma', line 15, column 4 to column 36)",
  " (in 'joint_binary_cov_gamma', line 16, column 10 to column 15)",
  " (in 'joint_binary_cov_gamma', line 16, column 4 to column 36)",
  " (in 'joint_binary_cov_gamma', line 17, column 4 to column 28)",
  " (in 'joint_binary_cov_gamma', line 18, column 4 to column 26)",
  " (in 'joint_binary_cov_gamma', line 19, column 11 to column 29)",
  " (in 'joint_binary_cov_gamma', line 19, column 30 to column 38)",
  " (in 'joint_binary_cov_gamma', line 19, column 4 to column 49)",
  " (in 'joint_binary_cov_gamma', line 22, column 10 to column 19)",
  " (in 'joint_binary_cov_gamma', line 23, column 10 to column 19)",
  " (in 'joint_binary_cov_gamma', line 25, column 11 to column 19)",
  " (in 'joint_binary_cov_gamma', line 26, column 10 to column 18)",
  " (in 'joint_binary_cov_gamma', line 29, column 8 to column 17)",
  " (in 'joint_binary_cov_gamma', line 30, column 8 to column 17)",
  " (in 'joint_binary_cov_gamma', line 31, column 8 to column 17)",
  " (in 'joint_binary_cov_gamma', line 32, column 8 to column 9)",
  " (in 'joint_binary_cov_gamma', line 60, column 9 to column 18)",
  " (in 'joint_binary_cov_gamma', line 62, column 9 to column 18)",
  " (in 'joint_binary_cov_gamma', line 63, column 8 to column 26)",
  " (in 'joint_binary_cov_gamma', line 64, column 8 to column 16)"};
#include <stan_meta_header.hpp>
class model_joint_binary_cov_gamma final : public model_base_crtp<model_joint_binary_cov_gamma> {
private:
  int S;
  int S_dna;
  int C;
  std::vector<int> L;
  std::vector<int> L_dna;
  std::vector<int> R;
  int Nloc_dna;
  int Nloc_trad;
  std::vector<int> trad_ind;
  std::vector<int> dna_ind;
  std::vector<double> E;
  std::vector<int> N;
  std::vector<int> K;
  std::vector<int> N_dna;
  std::vector<int> K_dna;
  std::vector<double> p10priors;
  int nsitecov;
  Eigen::Matrix<double,-1,-1> mat_site_data__;
  int log_lik_1dim__;
  int mu_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> mat_site{nullptr, 0, 0};
public:
  ~model_joint_binary_cov_gamma() {}
  model_joint_binary_cov_gamma(stan::io::var_context& context__, unsigned int
                               random_seed__ = 0, std::ostream*
                               pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_joint_binary_cov_gamma_namespace::model_joint_binary_cov_gamma";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 59;
      context__.validate_dims("data initialization", "S", "int",
        std::vector<size_t>{});
      S = std::numeric_limits<int>::min();
      current_statement__ = 59;
      S = context__.vals_i("S")[(1 - 1)];
      current_statement__ = 59;
      stan::math::check_greater_or_equal(function__, "S", S, 1);
      current_statement__ = 60;
      context__.validate_dims("data initialization", "S_dna", "int",
        std::vector<size_t>{});
      S_dna = std::numeric_limits<int>::min();
      current_statement__ = 60;
      S_dna = context__.vals_i("S_dna")[(1 - 1)];
      current_statement__ = 60;
      stan::math::check_greater_or_equal(function__, "S_dna", S_dna, 0);
      current_statement__ = 61;
      context__.validate_dims("data initialization", "C", "int",
        std::vector<size_t>{});
      C = std::numeric_limits<int>::min();
      current_statement__ = 61;
      C = context__.vals_i("C")[(1 - 1)];
      current_statement__ = 61;
      stan::math::check_greater_or_equal(function__, "C", C, 1);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("L", "S", S);
      current_statement__ = 63;
      context__.validate_dims("data initialization", "L", "int",
        std::vector<size_t>{static_cast<size_t>(S)});
      L = std::vector<int>(S, std::numeric_limits<int>::min());
      current_statement__ = 63;
      L = context__.vals_i("L");
      current_statement__ = 63;
      stan::math::check_greater_or_equal(function__, "L", L, 1);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("L_dna", "S_dna", S_dna);
      current_statement__ = 65;
      context__.validate_dims("data initialization", "L_dna", "int",
        std::vector<size_t>{static_cast<size_t>(S_dna)});
      L_dna = std::vector<int>(S_dna, std::numeric_limits<int>::min());
      current_statement__ = 65;
      L_dna = context__.vals_i("L_dna");
      current_statement__ = 65;
      stan::math::check_greater_or_equal(function__, "L_dna", L_dna, 1);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("R", "C", C);
      current_statement__ = 67;
      context__.validate_dims("data initialization", "R", "int",
        std::vector<size_t>{static_cast<size_t>(C)});
      R = std::vector<int>(C, std::numeric_limits<int>::min());
      current_statement__ = 67;
      R = context__.vals_i("R");
      current_statement__ = 67;
      stan::math::check_greater_or_equal(function__, "R", R, 1);
      current_statement__ = 68;
      context__.validate_dims("data initialization", "Nloc_dna", "int",
        std::vector<size_t>{});
      Nloc_dna = std::numeric_limits<int>::min();
      current_statement__ = 68;
      Nloc_dna = context__.vals_i("Nloc_dna")[(1 - 1)];
      current_statement__ = 68;
      stan::math::check_greater_or_equal(function__, "Nloc_dna", Nloc_dna, 0);
      current_statement__ = 69;
      context__.validate_dims("data initialization", "Nloc_trad", "int",
        std::vector<size_t>{});
      Nloc_trad = std::numeric_limits<int>::min();
      current_statement__ = 69;
      Nloc_trad = context__.vals_i("Nloc_trad")[(1 - 1)];
      current_statement__ = 69;
      stan::math::check_greater_or_equal(function__, "Nloc_trad", Nloc_trad,
        1);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("trad_ind", "Nloc_trad",
        Nloc_trad);
      current_statement__ = 71;
      context__.validate_dims("data initialization", "trad_ind", "int",
        std::vector<size_t>{static_cast<size_t>(Nloc_trad)});
      trad_ind = std::vector<int>(Nloc_trad, std::numeric_limits<int>::min());
      current_statement__ = 71;
      trad_ind = context__.vals_i("trad_ind");
      current_statement__ = 71;
      stan::math::check_greater_or_equal(function__, "trad_ind", trad_ind, 0);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("dna_ind", "Nloc_dna", Nloc_dna);
      current_statement__ = 73;
      context__.validate_dims("data initialization", "dna_ind", "int",
        std::vector<size_t>{static_cast<size_t>(Nloc_dna)});
      dna_ind = std::vector<int>(Nloc_dna, std::numeric_limits<int>::min());
      current_statement__ = 73;
      dna_ind = context__.vals_i("dna_ind");
      current_statement__ = 73;
      stan::math::check_greater_or_equal(function__, "dna_ind", dna_ind, 0);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("E", "C", C);
      current_statement__ = 75;
      context__.validate_dims("data initialization", "E", "double",
        std::vector<size_t>{static_cast<size_t>(C)});
      E = std::vector<double>(C, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 75;
      E = context__.vals_r("E");
      current_statement__ = 75;
      stan::math::check_greater_or_equal(function__, "E", E, 0);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("N", "S", S);
      current_statement__ = 77;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{static_cast<size_t>(S)});
      N = std::vector<int>(S, std::numeric_limits<int>::min());
      current_statement__ = 77;
      N = context__.vals_i("N");
      current_statement__ = 77;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("K", "S", S);
      current_statement__ = 79;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{static_cast<size_t>(S)});
      K = std::vector<int>(S, std::numeric_limits<int>::min());
      current_statement__ = 79;
      K = context__.vals_i("K");
      current_statement__ = 79;
      stan::math::check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 80;
      stan::math::validate_non_negative_index("N_dna", "S_dna", S_dna);
      current_statement__ = 81;
      context__.validate_dims("data initialization", "N_dna", "int",
        std::vector<size_t>{static_cast<size_t>(S_dna)});
      N_dna = std::vector<int>(S_dna, std::numeric_limits<int>::min());
      current_statement__ = 81;
      N_dna = context__.vals_i("N_dna");
      current_statement__ = 81;
      stan::math::check_greater_or_equal(function__, "N_dna", N_dna, 1);
      current_statement__ = 82;
      stan::math::validate_non_negative_index("K_dna", "S_dna", S_dna);
      current_statement__ = 83;
      context__.validate_dims("data initialization", "K_dna", "int",
        std::vector<size_t>{static_cast<size_t>(S_dna)});
      K_dna = std::vector<int>(S_dna, std::numeric_limits<int>::min());
      current_statement__ = 83;
      K_dna = context__.vals_i("K_dna");
      current_statement__ = 83;
      stan::math::check_greater_or_equal(function__, "K_dna", K_dna, 0);
      current_statement__ = 84;
      context__.validate_dims("data initialization", "p10priors", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      p10priors = std::vector<double>(2,
                    std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 84;
      p10priors = context__.vals_r("p10priors");
      current_statement__ = 85;
      context__.validate_dims("data initialization", "nsitecov", "int",
        std::vector<size_t>{});
      nsitecov = std::numeric_limits<int>::min();
      current_statement__ = 85;
      nsitecov = context__.vals_i("nsitecov")[(1 - 1)];
      current_statement__ = 85;
      stan::math::check_greater_or_equal(function__, "nsitecov", nsitecov, 0);
      current_statement__ = 86;
      stan::math::validate_non_negative_index("mat_site",
        "Nloc_trad + Nloc_dna", (Nloc_trad + Nloc_dna));
      current_statement__ = 87;
      stan::math::validate_non_negative_index("mat_site", "nsitecov",
        nsitecov);
      current_statement__ = 88;
      context__.validate_dims("data initialization", "mat_site", "double",
        std::vector<size_t>{static_cast<size_t>((Nloc_trad + Nloc_dna)),
          static_cast<size_t>(nsitecov)});
      mat_site_data__ = Eigen::Matrix<double,-1,-1>::Constant((Nloc_trad +
                          Nloc_dna), nsitecov,
                          std::numeric_limits<double>::quiet_NaN());
      new (&mat_site)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(mat_site_data__.data(),
        (Nloc_trad + Nloc_dna), nsitecov);
      {
        std::vector<local_scalar_t__> mat_site_flat__;
        current_statement__ = 88;
        mat_site_flat__ = context__.vals_r("mat_site");
        current_statement__ = 88;
        pos__ = 1;
        current_statement__ = 88;
        for (int sym1__ = 1; sym1__ <= nsitecov; ++sym1__) {
          current_statement__ = 88;
          for (int sym2__ = 1; sym2__ <= (Nloc_trad + Nloc_dna); ++sym2__) {
            current_statement__ = 88;
            stan::model::assign(mat_site, mat_site_flat__[(pos__ - 1)],
              "assigning variable mat_site", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 88;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 89;
      stan::math::validate_non_negative_index("alpha_gamma", "Nloc_trad",
        Nloc_trad);
      current_statement__ = 90;
      stan::math::validate_non_negative_index("beta_gamma", "Nloc_trad",
        Nloc_trad);
      current_statement__ = 91;
      stan::math::validate_non_negative_index("alpha", "nsitecov", nsitecov);
      current_statement__ = 92;
      stan::math::validate_non_negative_index("p_dna", "Nloc_dna", Nloc_dna);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("p11_trad", "Nloc_trad",
        Nloc_trad);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("p_trad", "Nloc_trad",
        Nloc_trad);
      current_statement__ = 95;
      stan::math::validate_non_negative_index("mu_trad", "Nloc_trad",
        Nloc_trad);
      current_statement__ = 96;
      stan::math::validate_non_negative_index("E_trans", "C", C);
      current_statement__ = 97;
      log_lik_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 97;
      log_lik_1dim__ = ((C + S) + S_dna);
      current_statement__ = 97;
      stan::math::validate_non_negative_index("log_lik", "C + S + S_dna",
        log_lik_1dim__);
      current_statement__ = 98;
      stan::math::validate_non_negative_index("beta", "Nloc_trad", Nloc_trad);
      current_statement__ = 99;
      mu_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 99;
      mu_1dim__ = (Nloc_dna + Nloc_trad);
      current_statement__ = 99;
      stan::math::validate_non_negative_index("mu", "Nloc_dna + Nloc_trad",
        mu_1dim__);
      current_statement__ = 100;
      stan::math::validate_non_negative_index("p11_dna", "Nloc_dna", Nloc_dna);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = Nloc_trad + Nloc_trad + 1 + nsitecov + Nloc_dna;
  }
  inline std::string model_name() const final {
    return "model_joint_binary_cov_gamma";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_joint_binary_cov_gamma_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<local_scalar_t__> alpha_gamma =
        std::vector<local_scalar_t__>(Nloc_trad, DUMMY_VAR__);
      current_statement__ = 1;
      alpha_gamma = in__.template read_constrain_lb<
                      std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                      Nloc_trad);
      std::vector<local_scalar_t__> beta_gamma =
        std::vector<local_scalar_t__>(Nloc_trad, DUMMY_VAR__);
      current_statement__ = 2;
      beta_gamma = in__.template read_constrain_lb<
                     std::vector<local_scalar_t__>, jacobian__>(0.01, lp__,
                     Nloc_trad);
      local_scalar_t__ log_p10 = DUMMY_VAR__;
      current_statement__ = 3;
      log_p10 = in__.template read_constrain_ub<local_scalar_t__,
                  jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nsitecov, DUMMY_VAR__);
      current_statement__ = 4;
      alpha = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(nsitecov);
      std::vector<local_scalar_t__> p_dna =
        std::vector<local_scalar_t__>(Nloc_dna, DUMMY_VAR__);
      current_statement__ = 5;
      p_dna = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
                jacobian__>(0, 1, lp__, Nloc_dna);
      std::vector<local_scalar_t__> p11_trad =
        std::vector<local_scalar_t__>(Nloc_trad, DUMMY_VAR__);
      std::vector<local_scalar_t__> p_trad =
        std::vector<local_scalar_t__>(Nloc_trad, DUMMY_VAR__);
      std::vector<local_scalar_t__> mu_trad =
        std::vector<local_scalar_t__>(Nloc_trad, DUMMY_VAR__);
      std::vector<local_scalar_t__> E_trans =
        std::vector<local_scalar_t__>(C, DUMMY_VAR__);
      current_statement__ = 19;
      for (int i = 1; i <= Nloc_trad; ++i) {
        current_statement__ = 15;
        stan::model::assign(mu_trad,
          (stan::model::rvalue(alpha_gamma, "alpha_gamma",
             stan::model::index_uni(i)) /
          stan::model::rvalue(beta_gamma, "beta_gamma",
            stan::model::index_uni(i))), "assigning variable mu_trad",
          stan::model::index_uni(i));
        current_statement__ = 16;
        stan::model::assign(p11_trad,
          (stan::model::rvalue(mu_trad, "mu_trad", stan::model::index_uni(i))
          /
          (stan::model::rvalue(mu_trad, "mu_trad", stan::model::index_uni(i))
          +
          stan::math::exp(
            stan::math::dot_product(
              stan::model::rvalue(mat_site, "mat_site",
                stan::model::index_uni(
                  stan::model::rvalue(trad_ind, "trad_ind",
                    stan::model::index_uni(i)))), alpha)))),
          "assigning variable p11_trad", stan::model::index_uni(i));
        current_statement__ = 17;
        stan::model::assign(p_trad,
          (stan::model::rvalue(p11_trad, "p11_trad",
             stan::model::index_uni(i)) + stan::math::exp(log_p10)),
          "assigning variable p_trad", stan::model::index_uni(i));
      }
      current_statement__ = 22;
      for (int j = 1; j <= C; ++j) {
        current_statement__ = 20;
        stan::model::assign(E_trans,
          (stan::model::rvalue(E, "E", stan::model::index_uni(j)) +
          0.0000000000001), "assigning variable E_trans",
          stan::model::index_uni(j));
      }
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "p11_trad", p11_trad, 0);
      current_statement__ = 6;
      stan::math::check_less_or_equal(function__, "p11_trad", p11_trad, 1);
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "p_trad", p_trad, 0);
      current_statement__ = 7;
      stan::math::check_less_or_equal(function__, "p_trad", p_trad, 1);
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "mu_trad", mu_trad, 0);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "E_trans", E_trans, 0);
      {
        current_statement__ = 47;
        for (int j = 1; j <= C; ++j) {
          current_statement__ = 45;
          lp_accum__.add(stan::math::gamma_lpdf<propto__>(
                           stan::model::rvalue(E_trans, "E_trans",
                             stan::model::index_uni(j)),
                           stan::model::rvalue(alpha_gamma, "alpha_gamma",
                             stan::model::index_uni(
                               stan::model::rvalue(R, "R",
                                 stan::model::index_uni(j)))),
                           stan::model::rvalue(beta_gamma, "beta_gamma",
                             stan::model::index_uni(
                               stan::model::rvalue(R, "R",
                                 stan::model::index_uni(j))))));
        }
        current_statement__ = 50;
        for (int i = 1; i <= S; ++i) {
          current_statement__ = 48;
          lp_accum__.add(stan::math::binomial_lpmf<propto__>(
                           stan::model::rvalue(K, "K",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(N, "N",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(p_trad, "p_trad",
                             stan::model::index_uni(
                               stan::model::rvalue(L, "L",
                                 stan::model::index_uni(i))))));
        }
        current_statement__ = 54;
        if (stan::math::logical_gt(Nloc_dna, 0)) {
          current_statement__ = 53;
          for (int i = 1; i <= S_dna; ++i) {
            current_statement__ = 51;
            lp_accum__.add(stan::math::binomial_lpmf<propto__>(
                             stan::model::rvalue(K_dna, "K_dna",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(N_dna, "N_dna",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(p_dna, "p_dna",
                               stan::model::index_uni(
                                 stan::model::rvalue(L_dna, "L_dna",
                                   stan::model::index_uni(i))))));
          }
        }
        current_statement__ = 55;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(log_p10,
                         stan::model::rvalue(p10priors, "p10priors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(p10priors, "p10priors",
                           stan::model::index_uni(2))));
        current_statement__ = 56;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha, 0, 10));
        current_statement__ = 57;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(beta_gamma, 0.25,
                         0.25));
        current_statement__ = 58;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(alpha_gamma, 0.01,
                         0.01));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_joint_binary_cov_gamma_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<double> alpha_gamma =
        std::vector<double>(Nloc_trad,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      alpha_gamma = in__.template read_constrain_lb<
                      std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                      Nloc_trad);
      std::vector<double> beta_gamma =
        std::vector<double>(Nloc_trad,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      beta_gamma = in__.template read_constrain_lb<
                     std::vector<local_scalar_t__>, jacobian__>(0.01, lp__,
                     Nloc_trad);
      double log_p10 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      log_p10 = in__.template read_constrain_ub<local_scalar_t__,
                  jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> alpha =
        Eigen::Matrix<double,-1,1>::Constant(nsitecov,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      alpha = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(nsitecov);
      std::vector<double> p_dna =
        std::vector<double>(Nloc_dna,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      p_dna = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
                jacobian__>(0, 1, lp__, Nloc_dna);
      std::vector<double> p11_trad =
        std::vector<double>(Nloc_trad,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> p_trad =
        std::vector<double>(Nloc_trad,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> mu_trad =
        std::vector<double>(Nloc_trad,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> E_trans =
        std::vector<double>(C, std::numeric_limits<double>::quiet_NaN());
      out__.write(alpha_gamma);
      out__.write(beta_gamma);
      out__.write(log_p10);
      out__.write(alpha);
      out__.write(p_dna);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 19;
      for (int i = 1; i <= Nloc_trad; ++i) {
        current_statement__ = 15;
        stan::model::assign(mu_trad,
          (stan::model::rvalue(alpha_gamma, "alpha_gamma",
             stan::model::index_uni(i)) /
          stan::model::rvalue(beta_gamma, "beta_gamma",
            stan::model::index_uni(i))), "assigning variable mu_trad",
          stan::model::index_uni(i));
        current_statement__ = 16;
        stan::model::assign(p11_trad,
          (stan::model::rvalue(mu_trad, "mu_trad", stan::model::index_uni(i))
          /
          (stan::model::rvalue(mu_trad, "mu_trad", stan::model::index_uni(i))
          +
          stan::math::exp(
            stan::math::dot_product(
              stan::model::rvalue(mat_site, "mat_site",
                stan::model::index_uni(
                  stan::model::rvalue(trad_ind, "trad_ind",
                    stan::model::index_uni(i)))), alpha)))),
          "assigning variable p11_trad", stan::model::index_uni(i));
        current_statement__ = 17;
        stan::model::assign(p_trad,
          (stan::model::rvalue(p11_trad, "p11_trad",
             stan::model::index_uni(i)) + stan::math::exp(log_p10)),
          "assigning variable p_trad", stan::model::index_uni(i));
      }
      current_statement__ = 22;
      for (int j = 1; j <= C; ++j) {
        current_statement__ = 20;
        stan::model::assign(E_trans,
          (stan::model::rvalue(E, "E", stan::model::index_uni(j)) +
          0.0000000000001), "assigning variable E_trans",
          stan::model::index_uni(j));
      }
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "p11_trad", p11_trad, 0);
      current_statement__ = 6;
      stan::math::check_less_or_equal(function__, "p11_trad", p11_trad, 1);
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "p_trad", p_trad, 0);
      current_statement__ = 7;
      stan::math::check_less_or_equal(function__, "p_trad", p_trad, 1);
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "mu_trad", mu_trad, 0);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "E_trans", E_trans, 0);
      if (emit_transformed_parameters__) {
        out__.write(p11_trad);
        out__.write(p_trad);
        out__.write(mu_trad);
        out__.write(E_trans);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(log_lik_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      double p10 = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(Nloc_trad,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> mu =
        std::vector<double>(mu_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> p11_dna =
        std::vector<double>(Nloc_dna,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 23;
      p10 = stan::math::exp(log_p10);
      current_statement__ = 26;
      for (int i = 1; i <= Nloc_trad; ++i) {
        current_statement__ = 24;
        stan::model::assign(mu,
          stan::model::rvalue(mu_trad, "mu_trad", stan::model::index_uni(i)),
          "assigning variable mu",
          stan::model::index_uni(
            stan::model::rvalue(trad_ind, "trad_ind",
              stan::model::index_uni(i))));
      }
      current_statement__ = 29;
      for (int i = 1; i <= Nloc_trad; ++i) {
        current_statement__ = 27;
        stan::model::assign(beta,
          stan::math::dot_product(
            stan::model::rvalue(mat_site, "mat_site",
              stan::model::index_uni(
                stan::model::rvalue(trad_ind, "trad_ind",
                  stan::model::index_uni(i)))), alpha),
          "assigning variable beta", stan::model::index_uni(i));
      }
      current_statement__ = 34;
      if (stan::math::logical_gt(Nloc_dna, 0)) {
        current_statement__ = 33;
        for (int i = 1; i <= Nloc_dna; ++i) {
          current_statement__ = 30;
          stan::model::assign(p11_dna,
            (stan::model::rvalue(p_dna, "p_dna", stan::model::index_uni(i)) -
            p10), "assigning variable p11_dna", stan::model::index_uni(i));
          current_statement__ = 31;
          stan::model::assign(mu,
            ((stan::model::rvalue(p11_dna, "p11_dna",
                stan::model::index_uni(i)) *
            stan::math::exp(
              stan::math::dot_product(
                stan::model::rvalue(mat_site, "mat_site",
                  stan::model::index_uni(
                    stan::model::rvalue(dna_ind, "dna_ind",
                      stan::model::index_uni(i)))), alpha))) / (1 -
            stan::model::rvalue(p11_dna, "p11_dna", stan::model::index_uni(i)))),
            "assigning variable mu",
            stan::model::index_uni(
              stan::model::rvalue(dna_ind, "dna_ind",
                stan::model::index_uni(i))));
        }
      }
      current_statement__ = 37;
      for (int j = 1; j <= C; ++j) {
        current_statement__ = 35;
        stan::model::assign(log_lik,
          stan::math::gamma_lpdf<false>(
            stan::model::rvalue(E_trans, "E_trans", stan::model::index_uni(j)),
            stan::model::rvalue(alpha_gamma, "alpha_gamma",
              stan::model::index_uni(
                stan::model::rvalue(R, "R", stan::model::index_uni(j)))),
            stan::model::rvalue(beta_gamma, "beta_gamma",
              stan::model::index_uni(
                stan::model::rvalue(R, "R", stan::model::index_uni(j))))),
          "assigning variable log_lik", stan::model::index_uni(j));
      }
      current_statement__ = 40;
      for (int i = 1; i <= S; ++i) {
        current_statement__ = 38;
        stan::model::assign(log_lik,
          stan::math::binomial_lpmf<false>(
            stan::model::rvalue(K, "K", stan::model::index_uni(i)),
            stan::model::rvalue(N, "N", stan::model::index_uni(i)),
            stan::model::rvalue(p_trad, "p_trad",
              stan::model::index_uni(
                stan::model::rvalue(L, "L", stan::model::index_uni(i))))),
          "assigning variable log_lik", stan::model::index_uni((C + i)));
      }
      current_statement__ = 44;
      if (stan::math::logical_gt(Nloc_dna, 0)) {
        current_statement__ = 43;
        for (int i = 1; i <= S_dna; ++i) {
          current_statement__ = 41;
          stan::model::assign(log_lik,
            stan::math::binomial_lpmf<false>(
              stan::model::rvalue(K_dna, "K_dna", stan::model::index_uni(i)),
              stan::model::rvalue(N_dna, "N_dna", stan::model::index_uni(i)),
              stan::model::rvalue(p_dna, "p_dna",
                stan::model::index_uni(
                  stan::model::rvalue(L_dna, "L_dna",
                    stan::model::index_uni(i))))),
            "assigning variable log_lik",
            stan::model::index_uni(((C + S) + i)));
        }
      }
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "mu", mu, 0);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "p11_dna", p11_dna, 0);
      current_statement__ = 14;
      stan::math::check_less_or_equal(function__, "p11_dna", p11_dna, 1);
      out__.write(log_lik);
      out__.write(p10);
      out__.write(beta);
      out__.write(mu);
      out__.write(p11_dna);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> alpha_gamma =
        std::vector<local_scalar_t__>(Nloc_trad, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(alpha_gamma,
        in__.read<std::vector<local_scalar_t__>>(Nloc_trad),
        "assigning variable alpha_gamma");
      out__.write_free_lb(0, alpha_gamma);
      std::vector<local_scalar_t__> beta_gamma =
        std::vector<local_scalar_t__>(Nloc_trad, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(beta_gamma,
        in__.read<std::vector<local_scalar_t__>>(Nloc_trad),
        "assigning variable beta_gamma");
      out__.write_free_lb(0.01, beta_gamma);
      local_scalar_t__ log_p10 = DUMMY_VAR__;
      current_statement__ = 3;
      log_p10 = in__.read<local_scalar_t__>();
      out__.write_free_ub(0, log_p10);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nsitecov, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(alpha,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(nsitecov),
        "assigning variable alpha");
      out__.write(alpha);
      std::vector<local_scalar_t__> p_dna =
        std::vector<local_scalar_t__>(Nloc_dna, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(p_dna,
        in__.read<std::vector<local_scalar_t__>>(Nloc_dna),
        "assigning variable p_dna");
      out__.write_free_lub(0, 1, p_dna);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "alpha_gamma",
        "double", std::vector<size_t>{static_cast<size_t>(Nloc_trad)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "beta_gamma",
        "double", std::vector<size_t>{static_cast<size_t>(Nloc_trad)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "log_p10",
        "double", std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{static_cast<size_t>(nsitecov)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "p_dna", "double",
        std::vector<size_t>{static_cast<size_t>(Nloc_dna)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> alpha_gamma =
        std::vector<local_scalar_t__>(Nloc_trad, DUMMY_VAR__);
      current_statement__ = 1;
      alpha_gamma = context__.vals_r("alpha_gamma");
      out__.write_free_lb(0, alpha_gamma);
      std::vector<local_scalar_t__> beta_gamma =
        std::vector<local_scalar_t__>(Nloc_trad, DUMMY_VAR__);
      current_statement__ = 2;
      beta_gamma = context__.vals_r("beta_gamma");
      out__.write_free_lb(0.01, beta_gamma);
      local_scalar_t__ log_p10 = DUMMY_VAR__;
      current_statement__ = 3;
      log_p10 = context__.vals_r("log_p10")[(1 - 1)];
      out__.write_free_ub(0, log_p10);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nsitecov, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 4;
        alpha_flat__ = context__.vals_r("alpha");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= nsitecov; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(alpha, alpha_flat__[(pos__ - 1)],
            "assigning variable alpha", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(alpha);
      std::vector<local_scalar_t__> p_dna =
        std::vector<local_scalar_t__>(Nloc_dna, DUMMY_VAR__);
      current_statement__ = 5;
      p_dna = context__.vals_r("p_dna");
      out__.write_free_lub(0, 1, p_dna);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"alpha_gamma", "beta_gamma",
                "log_p10", "alpha", "p_dna"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"p11_trad", "p_trad", "mu_trad", "E_trans"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"log_lik", "p10", "beta", "mu", "p11_dna"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    Nloc_trad)},
                std::vector<size_t>{static_cast<size_t>(Nloc_trad)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(nsitecov)},
                std::vector<size_t>{static_cast<size_t>(Nloc_dna)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(Nloc_trad)},
             std::vector<size_t>{static_cast<size_t>(Nloc_trad)},
             std::vector<size_t>{static_cast<size_t>(Nloc_trad)},
             std::vector<size_t>{static_cast<size_t>(C)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(log_lik_1dim__)},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(Nloc_trad)},
             std::vector<size_t>{static_cast<size_t>(mu_1dim__)},
             std::vector<size_t>{static_cast<size_t>(Nloc_dna)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= Nloc_trad; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha_gamma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= Nloc_trad; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_gamma" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "log_p10");
    for (int sym1__ = 1; sym1__ <= nsitecov; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= Nloc_dna; ++sym1__) {
      param_names__.emplace_back(std::string() + "p_dna" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= Nloc_trad; ++sym1__) {
        param_names__.emplace_back(std::string() + "p11_trad" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Nloc_trad; ++sym1__) {
        param_names__.emplace_back(std::string() + "p_trad" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Nloc_trad; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_trad" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        param_names__.emplace_back(std::string() + "E_trans" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "p10");
      for (int sym1__ = 1; sym1__ <= Nloc_trad; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= mu_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Nloc_dna; ++sym1__) {
        param_names__.emplace_back(std::string() + "p11_dna" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= Nloc_trad; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha_gamma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= Nloc_trad; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_gamma" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "log_p10");
    for (int sym1__ = 1; sym1__ <= nsitecov; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= Nloc_dna; ++sym1__) {
      param_names__.emplace_back(std::string() + "p_dna" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= Nloc_trad; ++sym1__) {
        param_names__.emplace_back(std::string() + "p11_trad" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Nloc_trad; ++sym1__) {
        param_names__.emplace_back(std::string() + "p_trad" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Nloc_trad; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_trad" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        param_names__.emplace_back(std::string() + "E_trans" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "p10");
      for (int sym1__ = 1; sym1__ <= Nloc_trad; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= mu_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Nloc_dna; ++sym1__) {
        param_names__.emplace_back(std::string() + "p11_dna" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha_gamma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Nloc_trad) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"beta_gamma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Nloc_trad) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"log_p10\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nsitecov) + "},\"block\":\"parameters\"},{\"name\":\"p_dna\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Nloc_dna) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p11_trad\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Nloc_trad) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"p_trad\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Nloc_trad) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"mu_trad\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Nloc_trad) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"E_trans\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(C) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"p10\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nloc_trad) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(mu_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"p11_dna\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Nloc_dna) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha_gamma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Nloc_trad) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"beta_gamma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Nloc_trad) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"log_p10\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nsitecov) + "},\"block\":\"parameters\"},{\"name\":\"p_dna\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Nloc_dna) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p11_trad\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Nloc_trad) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"p_trad\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Nloc_trad) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"mu_trad\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Nloc_trad) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"E_trans\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(C) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"p10\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nloc_trad) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(mu_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"p11_dna\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Nloc_dna) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((Nloc_trad + Nloc_trad) + 1) + nsitecov) +
      Nloc_dna);
    const size_t num_transformed = emit_transformed_parameters *
      ((((Nloc_trad + Nloc_trad) + Nloc_trad) + C));
    const size_t num_gen_quantities = emit_generated_quantities *
      (((((log_lik_1dim__ + 1) + Nloc_trad) + mu_1dim__) + Nloc_dna));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((Nloc_trad + Nloc_trad) + 1) + nsitecov) +
      Nloc_dna);
    const size_t num_transformed = emit_transformed_parameters *
      ((((Nloc_trad + Nloc_trad) + Nloc_trad) + C));
    const size_t num_gen_quantities = emit_generated_quantities *
      (((((log_lik_1dim__ + 1) + Nloc_trad) + mu_1dim__) + Nloc_dna));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_joint_binary_cov_gamma_namespace::model_joint_binary_cov_gamma;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_joint_binary_cov_gamma_namespace::profiles__;
}
#endif
#endif
