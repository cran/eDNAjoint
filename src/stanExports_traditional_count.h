// Generated by rstantools.  Do not edit by hand.

/*
    eDNAjoint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    eDNAjoint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with eDNAjoint.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_traditional_count_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 179> locations_array__ =
  {" (found before start of program)",
  " (in 'traditional_count', line 359, column 2 to column 31)",
  " (in 'traditional_count', line 361, column 2 to column 45)",
  " (in 'traditional_count', line 363, column 2 to column 44)",
  " (in 'traditional_count', line 366, column 2 to column 54)",
  " (in 'traditional_count', line 389, column 2 to column 20)",
  " (in 'traditional_count', line 390, column 2 to column 22)",
  " (in 'traditional_count', line 391, column 2 to column 31)",
  " (in 'traditional_count', line 368, column 4 to column 51)",
  " (in 'traditional_count', line 367, column 17 to line 369, column 3)",
  " (in 'traditional_count', line 367, column 2 to line 369, column 3)",
  " (in 'traditional_count', line 395, column 4 to column 20)",
  " (in 'traditional_count', line 394, column 17 to line 396, column 3)",
  " (in 'traditional_count', line 394, column 2 to line 396, column 3)",
  " (in 'traditional_count', line 397, column 2 to column 56)",
  " (in 'traditional_count', line 400, column 2 to line 402, column 4)",
  " (in 'traditional_count', line 373, column 14 to column 17)",
  " (in 'traditional_count', line 373, column 2 to column 19)",
  " (in 'traditional_count', line 374, column 2 to column 63)",
  " (in 'traditional_count', line 381, column 6 to column 34)",
  " (in 'traditional_count', line 380, column 21 to line 382, column 5)",
  " (in 'traditional_count', line 380, column 4 to line 382, column 5)",
  " (in 'traditional_count', line 379, column 9 to line 383, column 3)",
  " (in 'traditional_count', line 377, column 6 to column 46)",
  " (in 'traditional_count', line 376, column 21 to line 378, column 5)",
  " (in 'traditional_count', line 376, column 4 to line 378, column 5)",
  " (in 'traditional_count', line 375, column 19 to line 379, column 3)",
  " (in 'traditional_count', line 375, column 2 to line 383, column 3)",
  " (in 'traditional_count', line 385, column 4 to column 46)",
  " (in 'traditional_count', line 384, column 19 to line 386, column 3)",
  " (in 'traditional_count', line 384, column 2 to line 386, column 3)",
  " (in 'traditional_count', line 339, column 2 to column 21)",
  " (in 'traditional_count', line 341, column 8 to column 11)",
  " (in 'traditional_count', line 341, column 2 to column 34)",
  " (in 'traditional_count', line 343, column 2 to column 22)",
  " (in 'traditional_count', line 345, column 8 to column 11)",
  " (in 'traditional_count', line 345, column 2 to column 32)",
  " (in 'traditional_count', line 347, column 2 to column 25)",
  " (in 'traditional_count', line 349, column 8 to column 11)",
  " (in 'traditional_count', line 349, column 2 to column 32)",
  " (in 'traditional_count', line 351, column 2 to column 27)",
  " (in 'traditional_count', line 353, column 2 to column 33)",
  " (in 'traditional_count', line 355, column 2 to column 31)",
  " (in 'traditional_count', line 359, column 20 to column 24)",
  " (in 'traditional_count', line 361, column 22 to column 43)",
  " (in 'traditional_count', line 363, column 27 to column 34)",
  " (in 'traditional_count', line 366, column 23 to column 52)",
  " (in 'traditional_count', line 389, column 9 to column 16)",
  " (in 'traditional_count', line 390, column 9 to column 12)",
  " (in 'traditional_count', line 391, column 9 to column 13)",
  " (in 'traditional_count', line 391, column 15 to column 26)",
  " (in 'traditional_count', line 19, column 11 to column 22)",
  " (in 'traditional_count', line 19, column 4 to column 32)",
  " (in 'traditional_count', line 22, column 6 to column 68)",
  " (in 'traditional_count', line 21, column 21 to line 23, column 5)",
  " (in 'traditional_count', line 21, column 4 to line 23, column 5)",
  " (in 'traditional_count', line 28, column 8 to column 77)",
  " (in 'traditional_count', line 27, column 25 to line 29, column 7)",
  " (in 'traditional_count', line 27, column 6 to line 29, column 7)",
  " (in 'traditional_count', line 25, column 22 to line 30, column 5)",
  " (in 'traditional_count', line 25, column 4 to line 30, column 5)",
  " (in 'traditional_count', line 32, column 4 to column 19)",
  " (in 'traditional_count', line 17, column 14 to line 33, column 3)",
  " (in 'traditional_count', line 43, column 11 to column 14)",
  " (in 'traditional_count', line 43, column 4 to column 24)",
  " (in 'traditional_count', line 52, column 8 to column 54)",
  " (in 'traditional_count', line 51, column 23 to line 53, column 7)",
  " (in 'traditional_count', line 51, column 6 to line 53, column 7)",
  " (in 'traditional_count', line 50, column 11 to line 54, column 5)",
  " (in 'traditional_count', line 48, column 8 to column 66)",
  " (in 'traditional_count', line 47, column 23 to line 49, column 7)",
  " (in 'traditional_count', line 47, column 6 to line 49, column 7)",
  " (in 'traditional_count', line 46, column 21 to line 50, column 5)",
  " (in 'traditional_count', line 46, column 4 to line 54, column 5)",
  " (in 'traditional_count', line 55, column 4 to column 19)",
  " (in 'traditional_count', line 41, column 10 to line 56, column 3)",
  " (in 'traditional_count', line 66, column 11 to column 14)",
  " (in 'traditional_count', line 66, column 4 to column 24)",
  " (in 'traditional_count', line 70, column 6 to column 73)",
  " (in 'traditional_count', line 69, column 21 to line 71, column 5)",
  " (in 'traditional_count', line 69, column 4 to line 71, column 5)",
  " (in 'traditional_count', line 73, column 4 to column 19)",
  " (in 'traditional_count', line 64, column 10 to line 74, column 3)",
  " (in 'traditional_count', line 99, column 11 to column 28)",
  " (in 'traditional_count', line 99, column 4 to column 38)",
  " (in 'traditional_count', line 102, column 16 to column 19)",
  " (in 'traditional_count', line 102, column 4 to column 21)",
  " (in 'traditional_count', line 103, column 4 to column 68)",
  " (in 'traditional_count', line 106, column 4 to column 75)",
  " (in 'traditional_count', line 109, column 4 to column 12)",
  " (in 'traditional_count', line 110, column 4 to column 28)",
  " (in 'traditional_count', line 111, column 4 to line 113, column 64)",
  " (in 'traditional_count', line 115, column 4 to column 19)",
  " (in 'traditional_count', line 97, column 14 to line 117, column 3)",
  " (in 'traditional_count', line 141, column 11 to column 24)",
  " (in 'traditional_count', line 141, column 4 to column 34)",
  " (in 'traditional_count', line 144, column 16 to column 19)",
  " (in 'traditional_count', line 144, column 4 to column 21)",
  " (in 'traditional_count', line 145, column 4 to column 77)",
  " (in 'traditional_count', line 148, column 4 to line 149, column 61)",
  " (in 'traditional_count', line 152, column 4 to column 12)",
  " (in 'traditional_count', line 153, column 4 to column 28)",
  " (in 'traditional_count', line 154, column 4 to line 156, column 64)",
  " (in 'traditional_count', line 158, column 4 to column 19)",
  " (in 'traditional_count', line 139, column 14 to line 160, column 3)",
  " (in 'traditional_count', line 171, column 16 to column 19)",
  " (in 'traditional_count', line 171, column 4 to column 21)",
  " (in 'traditional_count', line 174, column 6 to line 176, column 8)",
  " (in 'traditional_count', line 173, column 21 to line 177, column 5)",
  " (in 'traditional_count', line 173, column 4 to line 177, column 5)",
  " (in 'traditional_count', line 179, column 4 to column 18)",
  " (in 'traditional_count', line 169, column 10 to line 180, column 1)",
  " (in 'traditional_count', line 191, column 16 to column 19)",
  " (in 'traditional_count', line 191, column 4 to column 21)",
  " (in 'traditional_count', line 194, column 6 to line 197, column 8)",
  " (in 'traditional_count', line 193, column 21 to line 198, column 5)",
  " (in 'traditional_count', line 193, column 4 to line 198, column 5)",
  " (in 'traditional_count', line 200, column 4 to column 18)",
  " (in 'traditional_count', line 189, column 10 to line 201, column 1)",
  " (in 'traditional_count', line 215, column 11 to column 14)",
  " (in 'traditional_count', line 215, column 4 to column 24)",
  " (in 'traditional_count', line 218, column 16 to column 19)",
  " (in 'traditional_count', line 218, column 4 to column 21)",
  " (in 'traditional_count', line 219, column 4 to column 65)",
  " (in 'traditional_count', line 222, column 4 to column 68)",
  " (in 'traditional_count', line 224, column 4 to column 19)",
  " (in 'traditional_count', line 213, column 14 to line 225, column 3)",
  " (in 'traditional_count', line 238, column 11 to column 14)",
  " (in 'traditional_count', line 238, column 4 to column 24)",
  " (in 'traditional_count', line 241, column 16 to column 19)",
  " (in 'traditional_count', line 241, column 4 to column 21)",
  " (in 'traditional_count', line 242, column 4 to column 71)",
  " (in 'traditional_count', line 245, column 4 to column 77)",
  " (in 'traditional_count', line 247, column 4 to column 19)",
  " (in 'traditional_count', line 236, column 15 to line 248, column 3)",
  " (in 'traditional_count', line 267, column 11 to column 31)",
  " (in 'traditional_count', line 267, column 33 to column 44)",
  " (in 'traditional_count', line 267, column 4 to column 49)",
  " (in 'traditional_count', line 269, column 4 to column 30)",
  " (in 'traditional_count', line 271, column 6 to column 51)",
  " (in 'traditional_count', line 270, column 19 to line 272, column 5)",
  " (in 'traditional_count', line 270, column 4 to line 272, column 5)",
  " (in 'traditional_count', line 276, column 21 to column 29)",
  " (in 'traditional_count', line 276, column 8 to column 31)",
  " (in 'traditional_count', line 277, column 8 to column 36)",
  " (in 'traditional_count', line 278, column 8 to line 281, column 12)",
  " (in 'traditional_count', line 275, column 28 to line 282, column 8)",
  " (in 'traditional_count', line 275, column 6 to line 282, column 8)",
  " (in 'traditional_count', line 285, column 10 to column 67)",
  " (in 'traditional_count', line 284, column 30 to line 286, column 9)",
  " (in 'traditional_count', line 284, column 8 to line 286, column 9)",
  " (in 'traditional_count', line 283, column 21 to line 287, column 7)",
  " (in 'traditional_count', line 283, column 6 to line 287, column 7)",
  " (in 'traditional_count', line 274, column 22 to line 288, column 5)",
  " (in 'traditional_count', line 274, column 4 to line 288, column 5)",
  " (in 'traditional_count', line 290, column 4 to column 14)",
  " (in 'traditional_count', line 265, column 15 to line 291, column 3)",
  " (in 'traditional_count', line 302, column 11 to column 15)",
  " (in 'traditional_count', line 302, column 17 to column 28)",
  " (in 'traditional_count', line 302, column 4 to column 33)",
  " (in 'traditional_count', line 304, column 4 to column 19)",
  " (in 'traditional_count', line 307, column 6 to column 40)",
  " (in 'traditional_count', line 306, column 19 to line 308, column 5)",
  " (in 'traditional_count', line 306, column 4 to line 308, column 5)",
  " (in 'traditional_count', line 310, column 4 to column 14)",
  " (in 'traditional_count', line 300, column 11 to line 311, column 3)",
  " (in 'traditional_count', line 322, column 11 to column 15)",
  " (in 'traditional_count', line 322, column 17 to column 28)",
  " (in 'traditional_count', line 322, column 4 to column 33)",
  " (in 'traditional_count', line 325, column 6 to column 36)",
  " (in 'traditional_count', line 324, column 22 to line 326, column 5)",
  " (in 'traditional_count', line 324, column 4 to line 326, column 5)",
  " (in 'traditional_count', line 330, column 8 to column 46)",
  " (in 'traditional_count', line 329, column 27 to line 331, column 7)",
  " (in 'traditional_count', line 329, column 6 to line 331, column 7)",
  " (in 'traditional_count', line 328, column 19 to line 332, column 5)",
  " (in 'traditional_count', line 328, column 4 to line 332, column 5)",
  " (in 'traditional_count', line 334, column 4 to column 14)",
  " (in 'traditional_count', line 320, column 11 to line 335, column 3)"};
template <typename T5__, typename T9__,
          stan::require_all_t<stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T9__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T5__>, T9__>,-1,1>
calc_loglik_dna(const int& n_S, const int& S_dna, const int& Nloc_dna,
                const std::vector<int>& n_K, const std::vector<int>& n_N,
                const T5__& p_trad_arg__, const std::vector<int>& L_ind,
                const std::vector<int>& K_dna, const std::vector<int>& N_dna,
                const std::vector<T9__>& p_dna, const std::vector<int>&
                L_dna, std::ostream* pstream__);
template <typename T0__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, T2__>,-1,1>
calc_loglik_trad_count(const std::vector<T0__>& lambda, const int& negbin,
                       const std::vector<T2__>& phi, const std::vector<int>&
                       n_E, const int& n_C, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__>,-1,1>
calc_loglik_trad_continuous(const std::vector<T0__>& lambda, const T1__&
                            beta_gamma_arg__, const std::vector<T2__>&
                            E_trans, const std::vector<int>& R_ind,
                            const int& n_C, std::ostream* pstream__);
template <typename T1__, typename T3__, typename T6__, typename T10__,
          typename T18__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_col_vector<T10__>,
                              stan::is_vt_not_complex<T10__>,
                              stan::is_stan_scalar<T18__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T1__, stan::base_type_t<T3__>, T6__,
                stan::base_type_t<T10__>, T18__>,-1,1>
calc_loglik_count(const int& ctch, const std::vector<T1__>& coef,
                  const std::vector<int>& mat, const T3__& mu_trad_arg__,
                  const std::vector<int>& R_ind, const int& negbin,
                  const std::vector<T6__>& phi, const std::vector<int>& n_E,
                  const std::vector<int>& n_K, const std::vector<int>& n_N,
                  const T10__& p_trad_arg__, const std::vector<int>& L_ind,
                  const int& n_C, const int& n_S, const int& S_dna,
                  const int& Nloc_dna, const std::vector<int>& K_dna,
                  const std::vector<int>& N_dna, const std::vector<T18__>&
                  p_dna, const std::vector<int>& L_dna, std::ostream*
                  pstream__);
template <typename T1__, typename T3__, typename T4__, typename T6__,
          typename T9__, typename T17__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_col_vector<T9__>,
                              stan::is_vt_not_complex<T9__>,
                              stan::is_stan_scalar<T17__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T1__, stan::base_type_t<T3__>,
                stan::base_type_t<T4__>, T6__, stan::base_type_t<T9__>,
                stan::promote_args_t<T17__>>,-1,1>
calc_loglik_continuous(const int& ctch, const std::vector<T1__>& coef,
                       const std::vector<int>& mat, const T3__&
                       alpha_gamma_arg__, const T4__& beta_gamma_arg__,
                       const std::vector<int>& R_ind,
                       const std::vector<T6__>& E_trans,
                       const std::vector<int>& n_K, const std::vector<int>&
                       n_N, const T9__& p_trad_arg__, const std::vector<int>&
                       L_ind, const int& n_C, const int& n_S, const int&
                       S_dna, const int& Nloc_dna, const std::vector<int>&
                       K_dna, const std::vector<int>& N_dna,
                       const std::vector<T17__>& p_dna,
                       const std::vector<int>& L_dna, std::ostream* pstream__);
template <typename T1__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
std::vector<stan::promote_args_t<T1__, stan::base_type_t<T3__>>>
get_lambda_count(const int& ctch, const std::vector<T1__>& coef,
                 const std::vector<int>& mat, const T3__& mu_trad_arg__,
                 const std::vector<int>& R_ind, const int& n_C, std::ostream*
                 pstream__);
template <typename T1__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
std::vector<stan::promote_args_t<T1__, stan::base_type_t<T3__>>>
get_lambda_continuous(const int& ctch, const std::vector<T1__>& coef,
                      const std::vector<int>& mat, const T3__&
                      alpha_gamma_arg__, const std::vector<int>& R_ind,
                      const int& n_C, std::ostream* pstream__);
template <typename T1__, typename T5__, typename T7__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T1__, T5__, stan::base_type_t<T7__>>,-1,1>
calc_loglik_tradmod_count(const int& negbin, const std::vector<T1__>& phi,
                          const std::vector<int>& n_E, const int& n_C,
                          const int& ctch, const std::vector<T5__>& coef,
                          const std::vector<int>& mat, const T7__&
                          mu_1_arg__, const std::vector<int>& R_ind,
                          std::ostream* pstream__);
template <typename T0__, typename T1__, typename T5__, typename T7__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T5__,
                stan::base_type_t<T7__>>,-1,1>
calc_loglik_tradmod_continuous(const T0__& beta_arg__,
                               const std::vector<T1__>& E_trans,
                               const std::vector<int>& R_ind, const int& n_C,
                               const int& ctch, const std::vector<T5__>&
                               coef, const std::vector<int>& mat, const T7__&
                               alpha_arg__, std::ostream* pstream__);
template <typename T2__, typename T5__, typename T8__, typename T9__,
          typename T10__, typename T11__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T8__>,
                              stan::is_stan_scalar<T9__>,
                              stan::is_eigen_matrix_dynamic<T10__>,
                              stan::is_vt_not_complex<T10__>,
                              stan::is_col_vector<T11__>,
                              stan::is_vt_not_complex<T11__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T2__>,
                stan::base_type_t<T5__>, T8__, T9__,
                stan::base_type_t<T10__>,
                stan::promote_args_t<stan::base_type_t<T11__>>>,-1,-1>
calc_mu(const std::vector<int>& trad_ind, const std::vector<int>& dna_ind,
        const T2__& mu_trad_arg__, const int& ctch, const int& nparams,
        const T5__& q_arg__, const int& Nloc_dna, const int& Nloc_trad,
        const std::vector<T8__>& p_dna, const T9__& p10, const T10__&
        mat_site_arg__, const T11__& alpha_arg__, std::ostream* pstream__);
template <typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T2__>,
                stan::base_type_t<T3__>>,-1,-1>
calc_mu_trad_count(const int& Nloc, const int& nparams, const T2__&
                   mu_1_arg__, const T3__& q_arg__, const int& ctch,
                   std::ostream* pstream__);
template <typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>>,-1,-1>
calc_mu_trad_continuous(const int& Nloc, const int& nparams, const T2__&
                        alpha_arg__, const T3__& beta_arg__, const T4__&
                        q_arg__, const int& ctch, std::ostream* pstream__);
template <typename T5__, typename T9__,
          stan::require_all_t<stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T9__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T5__>, T9__>,-1,1>
calc_loglik_dna(const int& n_S, const int& S_dna, const int& Nloc_dna,
                const std::vector<int>& n_K, const std::vector<int>& n_N,
                const T5__& p_trad_arg__, const std::vector<int>& L_ind,
                const std::vector<int>& K_dna, const std::vector<int>& N_dna,
                const std::vector<T9__>& p_dna, const std::vector<int>&
                L_dna, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T5__>,
                             T9__>;
  int current_statement__ = 0;
  const auto& p_trad = stan::math::to_ref(p_trad_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 51;
    stan::math::validate_non_negative_index("log_lik", "n_S + S_dna", (n_S +
      S_dna));
    Eigen::Matrix<local_scalar_t__,-1,1> log_lik =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((n_S + S_dna),
        DUMMY_VAR__);
    current_statement__ = 55;
    for (int i = 1; i <= n_S; ++i) {
      current_statement__ = 53;
      stan::model::assign(log_lik,
        stan::math::binomial_lpmf<false>(
          stan::model::rvalue(n_K, "n_K", stan::model::index_uni(i)),
          stan::model::rvalue(n_N, "n_N", stan::model::index_uni(i)),
          stan::model::rvalue(p_trad, "p_trad",
            stan::model::index_uni(
              stan::model::rvalue(L_ind, "L_ind", stan::model::index_uni(i))))),
        "assigning variable log_lik", stan::model::index_uni(i));
    }
    current_statement__ = 60;
    if (stan::math::logical_gt(Nloc_dna, 0)) {
      current_statement__ = 58;
      for (int i = 1; i <= S_dna; ++i) {
        current_statement__ = 56;
        stan::model::assign(log_lik,
          stan::math::binomial_lpmf<false>(
            stan::model::rvalue(K_dna, "K_dna", stan::model::index_uni(i)),
            stan::model::rvalue(N_dna, "N_dna", stan::model::index_uni(i)),
            stan::model::rvalue(p_dna, "p_dna",
              stan::model::index_uni(
                stan::model::rvalue(L_dna, "L_dna", stan::model::index_uni(i))))),
          "assigning variable log_lik", stan::model::index_uni((n_S + i)));
      }
    }
    current_statement__ = 61;
    return log_lik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T2__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, T2__>,-1,1>
calc_loglik_trad_count(const std::vector<T0__>& lambda, const int& negbin,
                       const std::vector<T2__>& phi, const std::vector<int>&
                       n_E, const int& n_C, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T2__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 63;
    stan::math::validate_non_negative_index("log_lik", "n_C", n_C);
    Eigen::Matrix<local_scalar_t__,-1,1> log_lik =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_C, DUMMY_VAR__);
    current_statement__ = 73;
    if (stan::math::logical_eq(negbin, 1)) {
      current_statement__ = 71;
      for (int j = 1; j <= n_C; ++j) {
        current_statement__ = 69;
        stan::model::assign(log_lik,
          stan::math::neg_binomial_2_lpmf<false>(
            stan::model::rvalue(n_E, "n_E", stan::model::index_uni(j)),
            stan::model::rvalue(lambda, "lambda", stan::model::index_uni(j)),
            phi), "assigning variable log_lik", stan::model::index_uni(j));
      }
    } else {
      current_statement__ = 67;
      for (int j = 1; j <= n_C; ++j) {
        current_statement__ = 65;
        stan::model::assign(log_lik,
          stan::math::poisson_lpmf<false>(
            stan::model::rvalue(n_E, "n_E", stan::model::index_uni(j)),
            stan::model::rvalue(lambda, "lambda", stan::model::index_uni(j))),
          "assigning variable log_lik", stan::model::index_uni(j));
      }
    }
    current_statement__ = 74;
    return log_lik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__>,-1,1>
calc_loglik_trad_continuous(const std::vector<T0__>& lambda, const T1__&
                            beta_gamma_arg__, const std::vector<T2__>&
                            E_trans, const std::vector<int>& R_ind,
                            const int& n_C, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>, T2__>;
  int current_statement__ = 0;
  const auto& beta_gamma = stan::math::to_ref(beta_gamma_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 76;
    stan::math::validate_non_negative_index("log_lik", "n_C", n_C);
    Eigen::Matrix<local_scalar_t__,-1,1> log_lik =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_C, DUMMY_VAR__);
    current_statement__ = 80;
    for (int j = 1; j <= n_C; ++j) {
      current_statement__ = 78;
      stan::model::assign(log_lik,
        stan::math::gamma_lpdf<false>(
          stan::model::rvalue(E_trans, "E_trans", stan::model::index_uni(j)),
          lambda,
          stan::model::rvalue(beta_gamma, "beta_gamma",
            stan::model::index_uni(
              stan::model::rvalue(R_ind, "R_ind", stan::model::index_uni(j))))),
        "assigning variable log_lik", stan::model::index_uni(j));
    }
    current_statement__ = 81;
    return log_lik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T3__, typename T6__, typename T10__,
          typename T18__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_col_vector<T10__>,
                              stan::is_vt_not_complex<T10__>,
                              stan::is_stan_scalar<T18__>>*>
Eigen::Matrix<stan::promote_args_t<T1__, stan::base_type_t<T3__>, T6__,
                stan::base_type_t<T10__>, T18__>,-1,1>
calc_loglik_count(const int& ctch, const std::vector<T1__>& coef,
                  const std::vector<int>& mat, const T3__& mu_trad_arg__,
                  const std::vector<int>& R_ind, const int& negbin,
                  const std::vector<T6__>& phi, const std::vector<int>& n_E,
                  const std::vector<int>& n_K, const std::vector<int>& n_N,
                  const T10__& p_trad_arg__, const std::vector<int>& L_ind,
                  const int& n_C, const int& n_S, const int& S_dna,
                  const int& Nloc_dna, const std::vector<int>& K_dna,
                  const std::vector<int>& N_dna, const std::vector<T18__>&
                  p_dna, const std::vector<int>& L_dna, std::ostream*
                  pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__,
                             stan::base_type_t<T3__>, T6__,
                             stan::base_type_t<T10__>, T18__>;
  int current_statement__ = 0;
  const auto& mu_trad = stan::math::to_ref(mu_trad_arg__);
  const auto& p_trad = stan::math::to_ref(p_trad_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 83;
    stan::math::validate_non_negative_index("log_lik", "n_C + n_S + S_dna",
      ((n_C + n_S) + S_dna));
    Eigen::Matrix<local_scalar_t__,-1,1> log_lik =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(((n_C + n_S) + S_dna),
        DUMMY_VAR__);
    current_statement__ = 85;
    stan::math::validate_non_negative_index("lambda", "n_C", n_C);
    std::vector<local_scalar_t__> lambda =
      std::vector<local_scalar_t__>(n_C, DUMMY_VAR__);
    current_statement__ = 87;
    stan::model::assign(lambda,
      get_lambda_count(ctch, coef, mat, mu_trad, R_ind, n_C, pstream__),
      "assigning variable lambda");
    current_statement__ = 88;
    stan::model::assign(log_lik,
      calc_loglik_trad_count(lambda, negbin, phi, n_E, n_C, pstream__),
      "assigning variable log_lik", stan::model::index_min_max(1, n_C));
    int end = std::numeric_limits<int>::min();
    current_statement__ = 90;
    end = ((n_C + n_S) + S_dna);
    current_statement__ = 91;
    stan::model::assign(log_lik,
      calc_loglik_dna(n_S, S_dna, Nloc_dna, n_K, n_N, p_trad, L_ind, K_dna,
        N_dna, p_dna, L_dna, pstream__), "assigning variable log_lik",
      stan::model::index_min_max((n_C + 1), end));
    current_statement__ = 92;
    return log_lik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T3__, typename T4__, typename T6__,
          typename T9__, typename T17__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_col_vector<T9__>,
                              stan::is_vt_not_complex<T9__>,
                              stan::is_stan_scalar<T17__>>*>
Eigen::Matrix<stan::promote_args_t<T1__, stan::base_type_t<T3__>,
                stan::base_type_t<T4__>, T6__, stan::base_type_t<T9__>,
                stan::promote_args_t<T17__>>,-1,1>
calc_loglik_continuous(const int& ctch, const std::vector<T1__>& coef,
                       const std::vector<int>& mat, const T3__&
                       alpha_gamma_arg__, const T4__& beta_gamma_arg__,
                       const std::vector<int>& R_ind,
                       const std::vector<T6__>& E_trans,
                       const std::vector<int>& n_K, const std::vector<int>&
                       n_N, const T9__& p_trad_arg__, const std::vector<int>&
                       L_ind, const int& n_C, const int& n_S, const int&
                       S_dna, const int& Nloc_dna, const std::vector<int>&
                       K_dna, const std::vector<int>& N_dna,
                       const std::vector<T17__>& p_dna,
                       const std::vector<int>& L_dna, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>, T6__,
                             stan::base_type_t<T9__>,
                             stan::promote_args_t<T17__>>;
  int current_statement__ = 0;
  const auto& alpha_gamma = stan::math::to_ref(alpha_gamma_arg__);
  const auto& beta_gamma = stan::math::to_ref(beta_gamma_arg__);
  const auto& p_trad = stan::math::to_ref(p_trad_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 94;
    stan::math::validate_non_negative_index("log_lik", "n_C + n_S + S_dna",
      ((n_C + n_S) + S_dna));
    Eigen::Matrix<local_scalar_t__,-1,1> log_lik =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(((n_C + n_S) + S_dna),
        DUMMY_VAR__);
    current_statement__ = 96;
    stan::math::validate_non_negative_index("lambda", "n_C", n_C);
    std::vector<local_scalar_t__> lambda =
      std::vector<local_scalar_t__>(n_C, DUMMY_VAR__);
    current_statement__ = 98;
    stan::model::assign(lambda,
      get_lambda_continuous(ctch, coef, mat, alpha_gamma, R_ind, n_C,
        pstream__), "assigning variable lambda");
    current_statement__ = 99;
    stan::model::assign(log_lik,
      calc_loglik_trad_continuous(lambda, beta_gamma, E_trans, R_ind, n_C,
        pstream__), "assigning variable log_lik",
      stan::model::index_min_max(1, n_C));
    int end = std::numeric_limits<int>::min();
    current_statement__ = 101;
    end = ((n_C + n_S) + S_dna);
    current_statement__ = 102;
    stan::model::assign(log_lik,
      calc_loglik_dna(n_S, S_dna, Nloc_dna, n_K, n_N, p_trad, L_ind, K_dna,
        N_dna, p_dna, L_dna, pstream__), "assigning variable log_lik",
      stan::model::index_min_max((n_C + 1), end));
    current_statement__ = 103;
    return log_lik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
std::vector<stan::promote_args_t<T1__, stan::base_type_t<T3__>>>
get_lambda_count(const int& ctch, const std::vector<T1__>& coef,
                 const std::vector<int>& mat, const T3__& mu_trad_arg__,
                 const std::vector<int>& R_ind, const int& n_C, std::ostream*
                 pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  const auto& mu_trad = stan::math::to_ref(mu_trad_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 105;
    stan::math::validate_non_negative_index("lambda", "n_C", n_C);
    std::vector<local_scalar_t__> lambda =
      std::vector<local_scalar_t__>(n_C, DUMMY_VAR__);
    current_statement__ = 109;
    for (int j = 1; j <= n_C; ++j) {
      current_statement__ = 107;
      stan::model::assign(lambda,
        (stan::math::logical_eq(ctch, 1) ? (stan::model::rvalue(coef, "coef",
                                              stan::model::index_uni(
                                                stan::model::rvalue(mat,
                                                  "mat",
                                                  stan::model::index_uni(j))))
        *
        stan::model::rvalue(mu_trad, "mu_trad",
          stan::model::index_uni(
            stan::model::rvalue(R_ind, "R_ind", stan::model::index_uni(j))))) : 
        stan::model::rvalue(mu_trad, "mu_trad",
          stan::model::index_uni(
            stan::model::rvalue(R_ind, "R_ind", stan::model::index_uni(j))))),
        "assigning variable lambda", stan::model::index_uni(j));
    }
    current_statement__ = 110;
    return lambda;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
std::vector<stan::promote_args_t<T1__, stan::base_type_t<T3__>>>
get_lambda_continuous(const int& ctch, const std::vector<T1__>& coef,
                      const std::vector<int>& mat, const T3__&
                      alpha_gamma_arg__, const std::vector<int>& R_ind,
                      const int& n_C, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  const auto& alpha_gamma = stan::math::to_ref(alpha_gamma_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 112;
    stan::math::validate_non_negative_index("lambda", "n_C", n_C);
    std::vector<local_scalar_t__> lambda =
      std::vector<local_scalar_t__>(n_C, DUMMY_VAR__);
    current_statement__ = 116;
    for (int j = 1; j <= n_C; ++j) {
      current_statement__ = 114;
      stan::model::assign(lambda,
        (stan::math::logical_eq(ctch, 1) ? (stan::model::rvalue(coef, "coef",
                                              stan::model::index_uni(
                                                stan::model::rvalue(mat,
                                                  "mat",
                                                  stan::model::index_uni(j))))
        *
        stan::model::rvalue(alpha_gamma, "alpha_gamma",
          stan::model::index_uni(
            stan::model::rvalue(R_ind, "R_ind", stan::model::index_uni(j))))) : 
        stan::model::rvalue(alpha_gamma, "alpha_gamma",
          stan::model::index_uni(
            stan::model::rvalue(R_ind, "R_ind", stan::model::index_uni(j))))),
        "assigning variable lambda", stan::model::index_uni(j));
    }
    current_statement__ = 117;
    return lambda;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T5__, typename T7__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>>*>
Eigen::Matrix<stan::promote_args_t<T1__, T5__, stan::base_type_t<T7__>>,-1,1>
calc_loglik_tradmod_count(const int& negbin, const std::vector<T1__>& phi,
                          const std::vector<int>& n_E, const int& n_C,
                          const int& ctch, const std::vector<T5__>& coef,
                          const std::vector<int>& mat, const T7__&
                          mu_1_arg__, const std::vector<int>& R_ind,
                          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__, T5__,
                             stan::base_type_t<T7__>>;
  int current_statement__ = 0;
  const auto& mu_1 = stan::math::to_ref(mu_1_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 119;
    stan::math::validate_non_negative_index("log_lik", "n_C", n_C);
    Eigen::Matrix<local_scalar_t__,-1,1> log_lik =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_C, DUMMY_VAR__);
    current_statement__ = 121;
    stan::math::validate_non_negative_index("lambda", "n_C", n_C);
    std::vector<local_scalar_t__> lambda =
      std::vector<local_scalar_t__>(n_C, DUMMY_VAR__);
    current_statement__ = 123;
    stan::model::assign(lambda,
      get_lambda_count(ctch, coef, mat, mu_1, R_ind, n_C, pstream__),
      "assigning variable lambda");
    current_statement__ = 124;
    stan::model::assign(log_lik,
      calc_loglik_trad_count(lambda, negbin, phi, n_E, n_C, pstream__),
      "assigning variable log_lik");
    current_statement__ = 125;
    return log_lik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T5__, typename T7__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T5__,
                stan::base_type_t<T7__>>,-1,1>
calc_loglik_tradmod_continuous(const T0__& beta_arg__,
                               const std::vector<T1__>& E_trans,
                               const std::vector<int>& R_ind, const int& n_C,
                               const int& ctch, const std::vector<T5__>&
                               coef, const std::vector<int>& mat, const T7__&
                               alpha_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__, T5__, stan::base_type_t<T7__>>;
  int current_statement__ = 0;
  const auto& beta = stan::math::to_ref(beta_arg__);
  const auto& alpha = stan::math::to_ref(alpha_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 127;
    stan::math::validate_non_negative_index("log_lik", "n_C", n_C);
    Eigen::Matrix<local_scalar_t__,-1,1> log_lik =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_C, DUMMY_VAR__);
    current_statement__ = 129;
    stan::math::validate_non_negative_index("lambda", "n_C", n_C);
    std::vector<local_scalar_t__> lambda =
      std::vector<local_scalar_t__>(n_C, DUMMY_VAR__);
    current_statement__ = 131;
    stan::model::assign(lambda,
      get_lambda_continuous(ctch, coef, mat, alpha, R_ind, n_C, pstream__),
      "assigning variable lambda");
    current_statement__ = 132;
    stan::model::assign(log_lik,
      calc_loglik_trad_continuous(lambda, beta, E_trans, R_ind, n_C,
        pstream__), "assigning variable log_lik");
    current_statement__ = 133;
    return log_lik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T2__, typename T5__, typename T8__, typename T9__,
          typename T10__, typename T11__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T8__>,
                              stan::is_stan_scalar<T9__>,
                              stan::is_eigen_matrix_dynamic<T10__>,
                              stan::is_vt_not_complex<T10__>,
                              stan::is_col_vector<T11__>,
                              stan::is_vt_not_complex<T11__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T2__>,
                stan::base_type_t<T5__>, T8__, T9__,
                stan::base_type_t<T10__>,
                stan::promote_args_t<stan::base_type_t<T11__>>>,-1,-1>
calc_mu(const std::vector<int>& trad_ind, const std::vector<int>& dna_ind,
        const T2__& mu_trad_arg__, const int& ctch, const int& nparams,
        const T5__& q_arg__, const int& Nloc_dna, const int& Nloc_trad,
        const std::vector<T8__>& p_dna, const T9__& p10, const T10__&
        mat_site_arg__, const T11__& alpha_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T2__>,
                             stan::base_type_t<T5__>, T8__, T9__,
                             stan::base_type_t<T10__>,
                             stan::promote_args_t<stan::base_type_t<T11__>>>;
  int current_statement__ = 0;
  const auto& mu_trad = stan::math::to_ref(mu_trad_arg__);
  const auto& q = stan::math::to_ref(q_arg__);
  const auto& mat_site = stan::math::to_ref(mat_site_arg__);
  const auto& alpha = stan::math::to_ref(alpha_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 135;
    stan::math::validate_non_negative_index("mu", "Nloc_dna + Nloc_trad",
      (Nloc_dna + Nloc_trad));
    current_statement__ = 136;
    stan::math::validate_non_negative_index("mu", "nparams + 1", (nparams +
      1));
    Eigen::Matrix<local_scalar_t__,-1,-1> mu =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((Nloc_dna + Nloc_trad),
        (nparams + 1), DUMMY_VAR__);
    current_statement__ = 138;
    stan::model::assign(mu, mu_trad, "assigning variable mu",
      stan::model::index_multi(trad_ind), stan::model::index_uni(1));
    current_statement__ = 141;
    if (stan::math::logical_eq(ctch, 1)) {
      current_statement__ = 139;
      stan::model::assign(mu,
        stan::math::multiply(mu_trad, stan::math::transpose(q)),
        "assigning variable mu", stan::model::index_multi(trad_ind),
        stan::model::index_min_max(2, (nparams + 1)));
    }
    current_statement__ = 154;
    if (stan::math::logical_gt(Nloc_dna, 0)) {
      current_statement__ = 147;
      for (int i = 1; i <= Nloc_dna; ++i) {
        current_statement__ = 142;
        stan::math::validate_non_negative_index("p11_dna", "Nloc_dna",
          Nloc_dna);
        std::vector<local_scalar_t__> p11_dna =
          std::vector<local_scalar_t__>(Nloc_dna, DUMMY_VAR__);
        current_statement__ = 144;
        stan::model::assign(p11_dna,
          (stan::model::rvalue(p_dna, "p_dna", stan::model::index_uni(i)) -
          p10), "assigning variable p11_dna", stan::model::index_uni(i));
        current_statement__ = 145;
        stan::model::assign(mu,
          ((stan::model::rvalue(p11_dna, "p11_dna", stan::model::index_uni(i))
          *
          stan::math::exp(
            stan::math::dot_product(
              stan::math::to_vector(
                stan::model::rvalue(mat_site, "mat_site",
                  stan::model::index_uni(
                    stan::model::rvalue(dna_ind, "dna_ind",
                      stan::model::index_uni(i))))), alpha))) / (1 -
          stan::model::rvalue(p11_dna, "p11_dna", stan::model::index_uni(i)))),
          "assigning variable mu",
          stan::model::index_uni(
            stan::model::rvalue(dna_ind, "dna_ind", stan::model::index_uni(i))),
          stan::model::index_uni(1));
      }
      current_statement__ = 152;
      if (stan::math::logical_eq(ctch, 1)) {
        current_statement__ = 150;
        for (int i = 1; i <= Nloc_dna; ++i) {
          current_statement__ = 148;
          stan::model::assign(mu,
            stan::math::multiply(
              stan::model::rvalue(mu, "mu",
                stan::model::index_uni(
                  stan::model::rvalue(dna_ind, "dna_ind",
                    stan::model::index_uni(i))), stan::model::index_uni(1)),
              stan::math::transpose(q)), "assigning variable mu",
            stan::model::index_uni(
              stan::model::rvalue(dna_ind, "dna_ind",
                stan::model::index_uni(i))),
            stan::model::index_min_max(2, (nparams + 1)));
        }
      }
    }
    current_statement__ = 155;
    return mu;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T2__>,
                stan::base_type_t<T3__>>,-1,-1>
calc_mu_trad_count(const int& Nloc, const int& nparams, const T2__&
                   mu_1_arg__, const T3__& q_arg__, const int& ctch,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  const auto& mu_1 = stan::math::to_ref(mu_1_arg__);
  const auto& q = stan::math::to_ref(q_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 157;
    stan::math::validate_non_negative_index("mu", "Nloc", Nloc);
    current_statement__ = 158;
    stan::math::validate_non_negative_index("mu", "nparams + 1", (nparams +
      1));
    Eigen::Matrix<local_scalar_t__,-1,-1> mu =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(Nloc, (nparams + 1),
        DUMMY_VAR__);
    current_statement__ = 160;
    stan::model::assign(mu, mu_1, "assigning variable mu",
      stan::model::index_omni(), stan::model::index_uni(1));
    current_statement__ = 163;
    if (stan::math::logical_eq(ctch, 1)) {
      current_statement__ = 161;
      stan::model::assign(mu,
        stan::math::multiply(mu_1, stan::math::transpose(q)),
        "assigning variable mu", stan::model::index_omni(),
        stan::model::index_min_max(2, (nparams + 1)));
    }
    current_statement__ = 164;
    return mu;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>>,-1,-1>
calc_mu_trad_continuous(const int& Nloc, const int& nparams, const T2__&
                        alpha_arg__, const T3__& beta_arg__, const T4__&
                        q_arg__, const int& ctch, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>>;
  int current_statement__ = 0;
  const auto& alpha = stan::math::to_ref(alpha_arg__);
  const auto& beta = stan::math::to_ref(beta_arg__);
  const auto& q = stan::math::to_ref(q_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 166;
    stan::math::validate_non_negative_index("mu", "Nloc", Nloc);
    current_statement__ = 167;
    stan::math::validate_non_negative_index("mu", "nparams + 1", (nparams +
      1));
    Eigen::Matrix<local_scalar_t__,-1,-1> mu =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(Nloc, (nparams + 1),
        DUMMY_VAR__);
    current_statement__ = 171;
    for (int j = 1; j <= Nloc; ++j) {
      current_statement__ = 169;
      stan::model::assign(mu,
        (stan::model::rvalue(alpha, "alpha", stan::model::index_uni(j)) /
        stan::model::rvalue(beta, "beta", stan::model::index_uni(j))),
        "assigning variable mu", stan::model::index_uni(j),
        stan::model::index_uni(1));
    }
    current_statement__ = 176;
    if (stan::math::logical_eq(ctch, 1)) {
      current_statement__ = 174;
      for (int i = 1; i <= nparams; ++i) {
        current_statement__ = 172;
        stan::model::assign(mu,
          stan::math::multiply(
            stan::math::to_vector(
              stan::model::deep_copy(
                stan::model::rvalue(mu, "mu", stan::model::index_omni(),
                  stan::model::index_uni(1)))),
            stan::model::rvalue(q, "q", stan::model::index_uni(i))),
          "assigning variable mu", stan::model::index_omni(),
          stan::model::index_uni((i + 1)));
      }
    }
    current_statement__ = 177;
    return mu;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_traditional_count final : public model_base_crtp<model_traditional_count> {
private:
  int n_C;
  std::vector<int> R_ind;
  int Nloc;
  std::vector<int> n_E;
  int nparams;
  std::vector<int> mat;
  std::vector<double> phi_priors;
  int negbin;
  int ctch;
  int phi_1dim__;
  int coef_1dim__;
  int mu_2dim__;
public:
  ~model_traditional_count() {}
  model_traditional_count(stan::io::var_context& context__, unsigned int
                          random_seed__ = 0, std::ostream*
                          pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_traditional_count_namespace::model_traditional_count";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 31;
      context__.validate_dims("data initialization", "n_C", "int",
        std::vector<size_t>{});
      n_C = std::numeric_limits<int>::min();
      current_statement__ = 31;
      n_C = context__.vals_i("n_C")[(1 - 1)];
      current_statement__ = 31;
      stan::math::check_greater_or_equal(function__, "n_C", n_C, 1);
      current_statement__ = 32;
      stan::math::validate_non_negative_index("R_ind", "n_C", n_C);
      current_statement__ = 33;
      context__.validate_dims("data initialization", "R_ind", "int",
        std::vector<size_t>{static_cast<size_t>(n_C)});
      R_ind = std::vector<int>(n_C, std::numeric_limits<int>::min());
      current_statement__ = 33;
      R_ind = context__.vals_i("R_ind");
      current_statement__ = 33;
      stan::math::check_greater_or_equal(function__, "R_ind", R_ind, 1);
      current_statement__ = 34;
      context__.validate_dims("data initialization", "Nloc", "int",
        std::vector<size_t>{});
      Nloc = std::numeric_limits<int>::min();
      current_statement__ = 34;
      Nloc = context__.vals_i("Nloc")[(1 - 1)];
      current_statement__ = 34;
      stan::math::check_greater_or_equal(function__, "Nloc", Nloc, 1);
      current_statement__ = 35;
      stan::math::validate_non_negative_index("n_E", "n_C", n_C);
      current_statement__ = 36;
      context__.validate_dims("data initialization", "n_E", "int",
        std::vector<size_t>{static_cast<size_t>(n_C)});
      n_E = std::vector<int>(n_C, std::numeric_limits<int>::min());
      current_statement__ = 36;
      n_E = context__.vals_i("n_E");
      current_statement__ = 36;
      stan::math::check_greater_or_equal(function__, "n_E", n_E, 0);
      current_statement__ = 37;
      context__.validate_dims("data initialization", "nparams", "int",
        std::vector<size_t>{});
      nparams = std::numeric_limits<int>::min();
      current_statement__ = 37;
      nparams = context__.vals_i("nparams")[(1 - 1)];
      current_statement__ = 37;
      stan::math::check_greater_or_equal(function__, "nparams", nparams, 0);
      current_statement__ = 38;
      stan::math::validate_non_negative_index("mat", "n_C", n_C);
      current_statement__ = 39;
      context__.validate_dims("data initialization", "mat", "int",
        std::vector<size_t>{static_cast<size_t>(n_C)});
      mat = std::vector<int>(n_C, std::numeric_limits<int>::min());
      current_statement__ = 39;
      mat = context__.vals_i("mat");
      current_statement__ = 39;
      stan::math::check_greater_or_equal(function__, "mat", mat, 1);
      current_statement__ = 40;
      context__.validate_dims("data initialization", "phi_priors", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      phi_priors = std::vector<double>(2,
                     std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 40;
      phi_priors = context__.vals_r("phi_priors");
      current_statement__ = 41;
      context__.validate_dims("data initialization", "negbin", "int",
        std::vector<size_t>{});
      negbin = std::numeric_limits<int>::min();
      current_statement__ = 41;
      negbin = context__.vals_i("negbin")[(1 - 1)];
      current_statement__ = 41;
      stan::math::check_greater_or_equal(function__, "negbin", negbin, 0);
      current_statement__ = 41;
      stan::math::check_less_or_equal(function__, "negbin", negbin, 1);
      current_statement__ = 42;
      context__.validate_dims("data initialization", "ctch", "int",
        std::vector<size_t>{});
      ctch = std::numeric_limits<int>::min();
      current_statement__ = 42;
      ctch = context__.vals_i("ctch")[(1 - 1)];
      current_statement__ = 42;
      stan::math::check_greater_or_equal(function__, "ctch", ctch, 0);
      current_statement__ = 42;
      stan::math::check_less_or_equal(function__, "ctch", ctch, 1);
      current_statement__ = 43;
      stan::math::validate_non_negative_index("mu_1", "Nloc", Nloc);
      current_statement__ = 44;
      phi_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 44;
      phi_1dim__ = (stan::math::logical_eq(negbin, 1) ? 1 : 0);
      current_statement__ = 44;
      stan::math::validate_non_negative_index("phi", "(negbin == 1) ? 1 : 0",
        phi_1dim__);
      current_statement__ = 45;
      stan::math::validate_non_negative_index("q_trans", "nparams", nparams);
      current_statement__ = 46;
      coef_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 46;
      coef_1dim__ = (stan::math::logical_eq(ctch, 1) ? (nparams + 1) : 0);
      current_statement__ = 46;
      stan::math::validate_non_negative_index("coef",
        "(ctch == 1) ? nparams + 1 : 0", coef_1dim__);
      current_statement__ = 47;
      stan::math::validate_non_negative_index("q", "nparams", nparams);
      current_statement__ = 48;
      stan::math::validate_non_negative_index("log_lik", "n_C", n_C);
      current_statement__ = 49;
      stan::math::validate_non_negative_index("mu", "Nloc", Nloc);
      current_statement__ = 50;
      mu_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 50;
      mu_2dim__ = (nparams + 1);
      current_statement__ = 50;
      stan::math::validate_non_negative_index("mu", "nparams + 1", mu_2dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = Nloc + phi_1dim__ + nparams;
  }
  inline std::string model_name() const final {
    return "model_traditional_count";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_traditional_count_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> mu_1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Nloc, DUMMY_VAR__);
      current_statement__ = 1;
      mu_1 = in__.template read_constrain_lb<
               Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
               Nloc);
      std::vector<local_scalar_t__> phi =
        std::vector<local_scalar_t__>(phi_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      phi = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
              jacobian__>(0, lp__, phi_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> q_trans =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nparams, DUMMY_VAR__);
      current_statement__ = 3;
      q_trans = in__.template read_constrain_lb<
                  Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-0.99999,
                  lp__, nparams);
      std::vector<local_scalar_t__> coef =
        std::vector<local_scalar_t__>(coef_1dim__, DUMMY_VAR__);
      current_statement__ = 10;
      if (stan::math::logical_eq(ctch, 1)) {
        current_statement__ = 8;
        stan::model::assign(coef,
          stan::math::to_array_1d(
            stan::math::append_row(1, stan::math::add(1, q_trans))),
          "assigning variable coef");
      }
      current_statement__ = 4;
      stan::math::check_greater_or_equal(function__, "coef", coef, 0);
      {
        current_statement__ = 16;
        stan::math::validate_non_negative_index("lambda", "n_C", n_C);
        std::vector<local_scalar_t__> lambda =
          std::vector<local_scalar_t__>(n_C, DUMMY_VAR__);
        current_statement__ = 18;
        stan::model::assign(lambda,
          get_lambda_count(ctch, coef, mat, mu_1, R_ind, n_C, pstream__),
          "assigning variable lambda");
        current_statement__ = 27;
        if (stan::math::logical_eq(negbin, 1)) {
          current_statement__ = 25;
          for (int j = 1; j <= n_C; ++j) {
            current_statement__ = 23;
            lp_accum__.add(stan::math::neg_binomial_2_lpmf<propto__>(
                             stan::model::rvalue(n_E, "n_E",
                               stan::model::index_uni(j)),
                             stan::model::rvalue(lambda, "lambda",
                               stan::model::index_uni(j)), phi));
          }
        } else {
          current_statement__ = 21;
          for (int j = 1; j <= n_C; ++j) {
            current_statement__ = 19;
            lp_accum__.add(stan::math::poisson_lpmf<propto__>(
                             stan::model::rvalue(n_E, "n_E",
                               stan::model::index_uni(j)),
                             stan::model::rvalue(lambda, "lambda",
                               stan::model::index_uni(j))));
          }
        }
        current_statement__ = 30;
        if (stan::math::logical_eq(negbin, 1)) {
          current_statement__ = 28;
          lp_accum__.add(stan::math::gamma_lpdf<propto__>(phi,
                           stan::model::rvalue(phi_priors, "phi_priors",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(phi_priors, "phi_priors",
                             stan::model::index_uni(2))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_traditional_count_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> mu_1 =
        Eigen::Matrix<double,-1,1>::Constant(Nloc,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      mu_1 = in__.template read_constrain_lb<
               Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
               Nloc);
      std::vector<double> phi =
        std::vector<double>(phi_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      phi = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
              jacobian__>(0, lp__, phi_1dim__);
      Eigen::Matrix<double,-1,1> q_trans =
        Eigen::Matrix<double,-1,1>::Constant(nparams,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      q_trans = in__.template read_constrain_lb<
                  Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-0.99999,
                  lp__, nparams);
      std::vector<double> coef =
        std::vector<double>(coef_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(mu_1);
      out__.write(phi);
      out__.write(q_trans);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 10;
      if (stan::math::logical_eq(ctch, 1)) {
        current_statement__ = 8;
        stan::model::assign(coef,
          stan::math::to_array_1d(
            stan::math::append_row(1, stan::math::add(1, q_trans))),
          "assigning variable coef");
      }
      current_statement__ = 4;
      stan::math::check_greater_or_equal(function__, "coef", coef, 0);
      if (emit_transformed_parameters__) {
        out__.write(coef);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> q =
        Eigen::Matrix<double,-1,1>::Constant(nparams,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(n_C,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> mu =
        Eigen::Matrix<double,-1,-1>::Constant(Nloc, mu_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 13;
      if (stan::math::logical_eq(ctch, 1)) {
        current_statement__ = 11;
        stan::model::assign(q, stan::math::add(q_trans, 1),
          "assigning variable q");
      }
      current_statement__ = 14;
      stan::model::assign(mu,
        calc_mu_trad_count(Nloc, nparams, mu_1, q, ctch, pstream__),
        "assigning variable mu");
      current_statement__ = 15;
      stan::model::assign(log_lik,
        calc_loglik_tradmod_count(negbin, phi, n_E, n_C, ctch, coef, mat,
          mu_1, R_ind, pstream__), "assigning variable log_lik");
      out__.write(q);
      out__.write(log_lik);
      out__.write(mu);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> mu_1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Nloc, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(mu_1,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(Nloc),
        "assigning variable mu_1");
      out__.write_free_lb(0, mu_1);
      std::vector<local_scalar_t__> phi =
        std::vector<local_scalar_t__>(phi_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(phi,
        in__.read<std::vector<local_scalar_t__>>(phi_1dim__),
        "assigning variable phi");
      out__.write_free_lb(0, phi);
      Eigen::Matrix<local_scalar_t__,-1,1> q_trans =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nparams, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(q_trans,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(nparams),
        "assigning variable q_trans");
      out__.write_free_lb(-0.99999, q_trans);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "mu_1", "double",
        std::vector<size_t>{static_cast<size_t>(Nloc)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "phi", "double",
        std::vector<size_t>{static_cast<size_t>(phi_1dim__)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "q_trans",
        "double", std::vector<size_t>{static_cast<size_t>(nparams)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> mu_1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Nloc, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> mu_1_flat__;
        current_statement__ = 1;
        mu_1_flat__ = context__.vals_r("mu_1");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= Nloc; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(mu_1, mu_1_flat__[(pos__ - 1)],
            "assigning variable mu_1", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, mu_1);
      std::vector<local_scalar_t__> phi =
        std::vector<local_scalar_t__>(phi_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      phi = context__.vals_r("phi");
      out__.write_free_lb(0, phi);
      Eigen::Matrix<local_scalar_t__,-1,1> q_trans =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nparams, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> q_trans_flat__;
        current_statement__ = 3;
        q_trans_flat__ = context__.vals_r("q_trans");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= nparams; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(q_trans, q_trans_flat__[(pos__ - 1)],
            "assigning variable q_trans", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(-0.99999, q_trans);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"mu_1", "phi", "q_trans"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"coef"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"q", "log_lik", "mu"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    Nloc)},
                std::vector<size_t>{static_cast<size_t>(phi_1dim__)},
                std::vector<size_t>{static_cast<size_t>(nparams)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(coef_1dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(nparams)},
             std::vector<size_t>{static_cast<size_t>(n_C)},
             std::vector<size_t>{static_cast<size_t>(Nloc),
               static_cast<size_t>(mu_2dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= Nloc; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "phi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nparams; ++sym1__) {
      param_names__.emplace_back(std::string() + "q_trans" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= coef_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "coef" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= nparams; ++sym1__) {
        param_names__.emplace_back(std::string() + "q" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_C; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= mu_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Nloc; ++sym2__) {
          param_names__.emplace_back(std::string() + "mu" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= Nloc; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "phi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nparams; ++sym1__) {
      param_names__.emplace_back(std::string() + "q_trans" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= coef_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "coef" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= nparams; ++sym1__) {
        param_names__.emplace_back(std::string() + "q" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_C; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= mu_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Nloc; ++sym2__) {
          param_names__.emplace_back(std::string() + "mu" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nloc) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(phi_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"q_trans\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nparams) + "},\"block\":\"parameters\"},{\"name\":\"coef\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(coef_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"q\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nparams) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_C) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(Nloc) + ",\"cols\":" + std::to_string(mu_2dim__) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nloc) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(phi_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"q_trans\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nparams) + "},\"block\":\"parameters\"},{\"name\":\"coef\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(coef_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"q\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nparams) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_C) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(Nloc) + ",\"cols\":" + std::to_string(mu_2dim__) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((Nloc + phi_1dim__) + nparams);
    const size_t num_transformed = emit_transformed_parameters *
      (coef_1dim__);
    const size_t num_gen_quantities = emit_generated_quantities * (((nparams
      + n_C) + (Nloc * mu_2dim__)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((Nloc + phi_1dim__) + nparams);
    const size_t num_transformed = emit_transformed_parameters *
      (coef_1dim__);
    const size_t num_gen_quantities = emit_generated_quantities * (((nparams
      + n_C) + (Nloc * mu_2dim__)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_traditional_count_namespace::model_traditional_count;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_traditional_count_namespace::profiles__;
}
#endif
#endif
